/*
 * [Introduzione]
 */

/*
 * Two modeltypes are declared. The http NS URIs correspond to those used to register the 
 * Ecore models in the environment. Alternatively, a workspace metamodel may be used 
 * in conjunction with mappings defined in the project properties.
 */
modeltype UML uses 'http://www.eclipse.org/uml2/2.1.0/UML';
modeltype Infrastructure uses 'http://schemas.ogf.org/occi/infrastructure/ecore';
modeltype OCCI uses 'http://schemas.ogf.org/occi/core/ecore';
//modeltype OCCI uses 'platform:/resource/progetto_SOSE/model/Infrastructure.ecore';

transformation deployment2occi(in uml : UML, out Infrastructure);

main() {
	uml.rootObjects()[UML::Model]->map model2InfrastructureModel();
}

mapping UML::Model::model2InfrastructureModel() : OCCI::Configuration {
	description := self.name;
	//resources := uml.objects()[UML::Node]->map nodes2resources()->asOrderedSet();
	//resources := self.ownedElement[UML::Node]->map nodes2resources()->asOrderedSet();
	// Versione con select [funziona]
	//resources := self.ownedElement[UML::Node]->select(e | not e.getAppliedStereotype('infrastructure::compute').oclIsUndefined())->map node2compute()
//			->union(self.ownedElement[UML::Node]->select(e | not e.getAppliedStereotype('infrastructure::storage').oclIsUndefined())->map node2storage())
//			->union(self.ownedElement[UML::Node]->select(e | not e.getAppliedStereotype('infrastructure::network').oclIsUndefined())->map node2network())
//			->union(self.ownedElement[UML::Node].ownedElement[UML::Node].map nodes2resources())->asOrderedSet();
	resources := self.ownedElement[UML::Node].map nodes2resources()->asOrderedSet();
	
}


mapping UML::Node::nodes2resources() : Sequence(OCCI::Resource){
	init{
		if not self.getAppliedStereotype('infrastructure::compute').oclIsUndefined() then {
			result := result->union(self.map node2compute()->asSequence());
		} elif not self.getAppliedStereotype('infrastructure::storage').oclIsUndefined() then {
			result := result->union(self.map node2storage()->asSequence());
		} else {
			result := result->union(self.map node2network()->asSequence());
		} endif;
		
		if not self.ownedElement[UML::Node]->isEmpty() then {
			result := result->union(self.ownedElement[UML::Node].map nodes2resources()->asSequence());				
		} endif;
		
		
//		result := self.ownedElement[UML::Node]->select(e | not e.getAppliedStereotype('infrastructure::compute').oclIsUndefined())->map node2compute()
//			->union(self.ownedElement[UML::Node]->select(e | not e.getAppliedStereotype('infrastructure::storage').oclIsUndefined())->map node2storage())
//			->union(self.ownedElement[UML::Node]->select(e | not e.getAppliedStereotype('infrastructure::network').oclIsUndefined())->map node2network())->asSequence();
//			->union(self.ownedElement[UML::Node]->map nestedNode2resources()->asSequence()->flatten());
//		result := self.ownedElement[UML::Node]->map nestedNode2resources()->asSequence()->flatten();
	}
}

/*
 * Questo mapping crea una risorsa Infrastructure di tipo compute a partire da un nodo UML. 
 *
 * Il mapping procede assegnando tutti gli attributi dello stereotipo infrastructure::compute agli attributi della risorsa 
 * di tipo infrastructure.
 *
 */
mapping UML::Node::node2compute() : Infrastructure::Compute{
	var stereotype = self.getAppliedStereotype('infrastructure::network');
	id := self.getValue(stereotype, 'id').oclAsType(String);
	title := self.name;
	summary := self.getValue(stereotype, 'summary').oclAsType(String);
	architecture := self.getValue(stereotype, 'architecture').oclAsType(infrastructure::Architecture);
	cores := self.getValue(stereotype, 'cores').oclAsType(Integer);
	hostname := self.getValue(stereotype, 'hostname').oclAsType(String);
	share := self.getValue(stereotype, 'share').oclAsType(Integer);
	speed := self.getValue(stereotype, 'speed').oclAsType(Real);
	memory := self.getValue(stereotype, 'memory').oclAsType(Real);
	state := self.getValue(stereotype, 'state').oclAsType(infrastructure::ComputeStatus);
	message := self.getValue(stereotype, 'message').oclAsType(String);
	var o := uml.objects()[UML::CommunicationPath].relatedElement;
	var communicationPaths := uml.objects()[UML::CommunicationPath];
	if communicationPaths.relatedElement->includes(self) then{
		communicationPaths->forEach(communicationPath){
			if communicationPath.relatedElement->includes(self) then{
				links += object Networkinterface{
					target := communicationPath.relatedElement->excluding(self)->asSequence()->at(1).oclAsType(UML::Node).map nodes2resources()->at(1);
				}
			}endif;
		};
	} endif;
}

/*
 * Questo mapping crea una risorsa Infrastructure di tipo storage a partire da un nodo UML. 
 *
 * Il mapping procede assegnando tutti gli attributi dello stereotipo infrastructure::storage agli attributi della risorsa 
 * di tipo infrastructure.
 *
 */
mapping UML::Node::node2storage() : Infrastructure::Storage{
	var stereotype = self.getAppliedStereotype('infrastructure::storage');
	id := self.getValue(stereotype, 'id').oclAsType(String);
	title := self.name;
	var o := self.getValue(stereotype, 'summary').oclAsType(String);
	size := self.getValue(stereotype, 'size').oclAsType(Real);
	state := self.getValue(stereotype, 'state').oclAsType(infrastructure::StorageStatus);
	message := self.getValue(stereotype, 'message').oclAsType(String);
	// Se il nodo storage è nested (e quindi ha un owner), aggiungo un link di tipo StorageLink collegato al nodo padre
	if self.owner.oclIsTypeOf(UML::Node) then {
		links += object Storagelink{
			target := self.owner.oclAsType(UML::Node).map nodes2resources()->at(1);
		}		
	} endif;
}

/*
 * Questo mapping crea una risorsa Infrastructure di tipo network a partire da un nodo UML. 
 *
 * Il mapping procede assegnando tutti gli attributi dello stereotipo infrastructure::network agli attributi della risorsa 
 * di tipo infrastructure.
 * In più id e title vengono assegnati anche come attributi (come vuole lo standard).
 *
 */
mapping UML::Node::node2network() : Infrastructure::Network{
	var stereotype = self.getAppliedStereotype('infrastructure::network');
	id := self.getValue(stereotype, 'id').oclAsType(String);
	title := self.name;
	summary := self.getValue(stereotype, 'summary').oclAsType(String);
	vlan := self.getValue(stereotype, 'vlan').oclAsType(Integer);
	label := self.getValue(stereotype, 'label').oclAsType(String);
	state := self.getValue(stereotype, 'state').oclAsType(infrastructure::NetworkStatus);
	message := self.getValue(stereotype, 'message').oclAsType(String);
	attributes += object AttributeState{
		name := 'occi.core.id';
		value := self.getValue(stereotype, 'id').oclAsType(String); 
	};
	attributes += object AttributeState{
		name := 'occi.core.title';
		value := self.getValue(stereotype, 'title').oclAsType(String); 
	};
}